#include "uart_com.h"
#include "xparameters.h"
#include "xil_types.h"
#include "xintc.h"
#include "xil_exception.h"
#include "xuartlite.h"




u8 single_byte_buffer[15] = {};



uart_com::uart_com(u32 ULITE_DEVICE_ID,u32 ULITE_INT_IRQ_ID,XUartLite* UPTR,XIntc* InterruptController,u32 XINTC_DEV_ID,XUartLite_Handler FuncPtr){

	this->InterruptController=InterruptController;
	this->ULITE_INT_IRQ_ID=ULITE_INT_IRQ_ID;
	this->UPTR=UPTR;


	XUartLite_Initialize(UPTR, ULITE_DEVICE_ID);
	XUartLite_SetSendHandler(UPTR, SendHandler, UPTR);
	XUartLite_SetRecvHandler(UPTR, FuncPtr, UPTR);
	XUartLite_EnableInterrupt(UPTR);


	XIntc_Initialize(InterruptController, XINTC_DEV_ID);

	XIntc_Connect(InterruptController, ULITE_INT_IRQ_ID,(XInterruptHandler)XUartLite_InterruptHandler,(void *)UPTR);

	XIntc_Start(InterruptController, XIN_REAL_MODE);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,(Xil_ExceptionHandler)XIntc_InterruptHandler,&InterruptController);
	Xil_ExceptionEnable();







	};

void uart_com::uart_com_send(u8* Send_Array,int length)
{
	XUartLite_Send(UPTR, Send_Array, length);
}

void uart_com::uart_com_int_enable()
{
	XIntc_Enable(InterruptController, ULITE_INT_IRQ_ID);
}

void uart_com::uart_com_int_disable()
{
	XIntc_Disable(InterruptController, ULITE_INT_IRQ_ID);
}

int uart_com::is_recv_fifo_valid_data(){
	u32 stat_reg=Xil_In32(UPTR->RegBaseAddress+0x08);
	return !(stat_reg & 0x000000001);

}

int uart_com::is_recv_fifo_full(){
	u32 stat_reg=Xil_In32(UPTR->RegBaseAddress+0x08);
	u32 stat_reg2=stat_reg;
	stat_reg=stat_reg>>1;
	stat_reg2=stat_reg2>>5;
	return ((stat_reg & 0x000000001) || (stat_reg2 & 0x000000001));
}



void SendHandler(void* CallbackRef, unsigned int EventData) {
    //uart_com* uartInstance = static_cast<uart_com*>(CallbackRef);

}





